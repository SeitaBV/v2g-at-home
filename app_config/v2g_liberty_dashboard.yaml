title: V2G Liberty
views:
  - path: default_view
    title: Main
    icon: mdi:car-electric
    layout:
      width: 300
      max_cols: 10
    badges: []
    cards:
      - type: vertical-stack
        title: Charger
        cards:
          - type: markdown
            entities:
              - entity: input_text.charger_state
              - entity: sensor.charger_real_charging_power
            content: >-
              <ha-icon icon="mdi:ev-station"></ha-icon>
              <table><tbody><tr><th>
              {{ states('input_text.charger_state') }}
              </th><td>
              {{ states('sensor.charger_real_charging_power') }}&nbsp;Watt
              </td></tr></tbody></table>
            card_mod:
              style:
                .: |
                  ha-card {
                    font-size: 123%;
                  }
                ha-markdown$: |
                  table {
                    width: 100%;
                    max-width: 100%;
                    margin: 8px 0;
                  }
                  th {
                    font-weight: normal;
                    text-align: left;
                  }
                  td {
                    text-align: right;
                    vertical-align: top;
                  }

          - type: conditional
            conditions:
              - entity: sensor.charger_charger_state
                state: "0"
              - entity: sensor.charger_locked
                state: "1"
            card:
              type: markdown
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -28px;
                  }
              content: >-
                <ha-alert alert-type="warning" title="The charger is locked">V2G Liberty cannot charge</ha-alert>

                Unlock the charger manually via the Wallbox app or -if used- the RFID card.

                This should restore automatic charging functionality.

          - type: conditional
            conditions:
              - entity: input_boolean.charger_modbus_communication_fault
                state: "on"
            card:
              type: markdown
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -28px;
                  }
              content: >-
                <ha-alert alert-type="error" title="The charger is not responding.">Automatic charging has been stopped.</ha-alert>

                Please follow these instructions:

                1. Restart the charger manually<br/>Via the Wallbox app or my.wallbox.com<br/>`Settings > Advanced options > Restart`

                2. Wait 5 minutes

                3. Restart AppDaemon<br/>`Settings > Addons > AppDaemon > Restart`

                4. Wait 2 minutes

                5. Switch chargemode to automatic


                This should restore automatic charging functionality.

          - type: button
            tap_action:
              action: call-service
              service: script.disconnectnow
              service_data: {}
              target: {}
            entity: ""
            name: Disconnect now
            icon: mdi:power-plug-off
            icon_height: 40px
            hold_action:
              action: none
            card_mod:
              style: |
                ha-card {
                  padding-top: 10px;
                }
      - type: vertical-stack
        title: Connected car
        cards:
          - type: gauge
            entity: input_number.car_state_of_charge
            min: 0
            max: 100
            name: Car SoC
            segments:
              - from: 0
                color: var(--error-color)
              - from: 5
                color: var(--warning-color)
              - from: 20
                color: var(--success-color)
              - from: 80
                color: var(--warning-color)
            needle: true
            unit: "%"
          - type: markdown
            content: 'â‰ˆ **{{ states("input_number.car_remaining_range")|round(0)}}** km'
            card_mod:
              style: |
                ha-card {
                  text-align: center;
                  border-top: none;
                  border-top-left-radius: 0;
                  border-top-right-radius: 0;
                  margin-top: -52px;
                }
          - type: custom:apexcharts-card
            graph_span: 24h
            span:
              start: hour
              offset: "-4h"
            now:
              show: true
            header:
              show: true
              title: Car State of Charge (%)
            apex_config:
              legend:
                show: false
              chart:
                zoom:
                  enabled: true
                toolbar:
                  show: true
                  tools:
                    zoom: true
                    pan: true
                    reset: true
            series:
              - entity: input_text.epex_prices
                color: "#666666"
                extend_to: false
                stroke_width: 1
                curve: stepline
                yaxis_id: EPEXprice
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.price];
                  });
                type: line
              - entity: input_text.co2_emissions
                transform: "return x / 6;"
                color: "#43a047"
                extend_to: false
                stroke_width: 1
                curve: stepline
                yaxis_id: EPEXprice
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.emission];
                  });
                type: line
              - entity: input_number.car_state_of_charge
                color: "#009be5"
                stroke_width: 2
                type: line
                extend_to: now
                yaxis_id: SoC
              - entity: input_text.soc_prognosis_boost
                type: line
                color: "#e48628"
                stroke_width: 2
                extend_to: false
                yaxis_id: SoC
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.soc];
                  });
              - entity: input_text.soc_prognosis
                type: line
                color: "#fea602"
                stroke_width: 2
                extend_to: false
                yaxis_id: SoC
                data_generator: |
                  return entity.attributes.records.map((record, index) => {
                    return [new Date(record.time).getTime(), record.soc];
                  });
            yaxis:
              - id: SoC
                min: 0
                max: 100
                decimals: 0
                apex_config:
                  tickAmount: 5
              - id: EPEXprice
                decimals: 0
                opposite: true
                min: "|-2|"
                max: "|+2|"
          - type: markdown
            content: >-
              <table><tbody><tr><th>
              Optimised on <span>{{states("input_text.optimisation_mode")}}</span>
              </th><td>
              {{states("input_text.utility_display_name")}}
              </td></tr></tbody></table>
            card_mod:
              style:
                .: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -22px;
                  }
                ha-markdown$: |
                  table {
                    width: 100%;
                    max-width: 100%;
                    margin: 8px 0;
                  }
                  th {
                    font-weight: normal;
                    text-align: left;
                  }
                  td {
                    text-align: right;
                    vertical-align: top;
                  }
                  span {
                    font-weight: bold;
                  }
          - type: conditional
            conditions:
              - entity: input_boolean.error_schedule_cannot_be_retrieved
                state: "on"
              - entity: binary_sensor.is_flexmeasures_live
                state: "on"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="warning">Temporarily no charging schedule available.</ha-alert>
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -22px;
                  }
          - type: conditional
            conditions:
              - entity: input_boolean.error_epex_prices_cannot_be_retrieved
                state: "on"
              - entity: binary_sensor.is_flexmeasures_live
                state: "on"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="warning">Temporarily no price data available.</ha-alert>
              card_mod:
                style: |
                  ha-card {
                    border-top: none;
                    border-top-left-radius: 0;
                    border-top-right-radius: 0;
                    margin-top: -22px;
                  }

          - type: markdown
            content: >-
              <h3>Last 7 days (approximations)</h3>
              <h4>Costs {{'â‚¬ %.2f'|format(states("input_number.total_charging_cost_last_7_days")|round(2))}}</h4>
              <table><thead>
              <tr>
                <th></th>
                <th>duration</th>
                <td>Emissions (kg COâ‚‚)</td>
                <td>Energy (kWh)</td>
              </tr></thead>
              <tbody><tr>
                <th>Charge</th>
                <th>{{states("input_text.total_charge_time_last_7_days")}}</th>
                <td>{{ '%.1f'|format((states("input_number.total_emissions_last_7_days")) | round(1)) }}</td>
                <td>{{ (states("input_number.total_charged_energy_last_7_days")) | int }}</td>
              </tr><tr>
                <th>Discharge</th>
                <th>{{states("input_text.total_discharge_time_last_7_days")}}</th>
                <td>{{ '%.1f'|format((states("input_number.total_saved_emissions_last_7_days")) | round(1)) }}</td>
                <td>{{ (states("input_number.total_discharged_energy_last_7_days")) | int }}</td>
              </tr></tbody>
              <tfoot><tr>
                <th>Net results</th>
                <th></th>
                <td>{{ '%.1f'|format((states("input_number.net_emissions_last_7_days")) | round(1)) }}</td>
                <td>{{ (states("input_number.net_energy_last_7_days")) | int }}</td>
              </tr></tfoot></table>
            card_mod:
              style:
                ha-markdown$: |
                  h3 {
                    font-weight: normal;
                    color: #797979;
                    font-size: 90%;
                    padding-bottom: 0;
                  }
                  h4 {
                    font-weigth: normal;
                    font-size: 150%;
                    line-height: 90%;
                    margin-top: -5px;
                    margin-bottom: 2px;
                  }
                  table {
                    width: 100%;
                    max-width: 100%;
                  }
                  tbody td, tfoot td {
                    font-weight: bold;
                  }
                  th {
                    text-align: left;
                    vertical-align: top;
                    font-weight: normal;
                  }
                  td {
                    text-align: right;
                  }
                  thead th, thead td {
                    border-bottom: 1px solid #cccccc;
                  }
                  tfoot th, tfoot td {
                    border-top: 1px solid #cccccc;
                  }
                  sub {
                    font-size: 80%;
                  }
      - type: vertical-stack
        title: Charge mode
        cards:
          - type: grid
            cards:
              - type: button
                name: Automatic
                hold_action:
                  action: none
                entity: input_boolean.chargemodeautomatic
                show_state: false
                icon_height: 40px
                card_mod:
                  style: |
                    ha-card {
                      padding: 10% 0 !important;
                    }
              - type: button
                name: Max Charge Now
                icon: mdi:battery-alert
                hold_action:
                  action: none
                entity: input_boolean.chargemodemaxboostnow
                show_state: false
                icon_height: 40px
                card_mod:
                  style: |
                    ha-card {
                      padding: 10% 0 !important;
                    }
              - type: button
                name: "Off"
                hold_action:
                  action: none
                entity: input_boolean.chargemodeoff
                icon_height: 40px
                show_state: false
                card_mod:
                  style: |
                    ha-card {
                      padding: 10% 0 !important;
                    }
            square: false
          - type: conditional
            conditions:
              - entity: input_text.charger_state
                state: No car connected
              - entity: input_boolean.chargemodemaxboostnow
                state: "on"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="warning" title="No car is connected">To start Max-charge-now, please connect the car to the charger.</ha-alert>
          - type: conditional
            conditions:
              - entity: binary_sensor.is_flexmeasures_live
                state: "off"
            card:
              type: markdown
              content: >-
                <ha-alert alert-type="error" title="FlexMeasures seems to be offline">It now is not possible to get an automated charging schedule.</ha-alert>
                Usually this problem is solved in a few minutes. If it remains over a longer period, please set charging 
                manually and check with system administrator.
          - type: calendar
            entities:
              - calendar.car_reservation
            initial_view: listWeek
            title: Car reservations
            card_mod:
              style: |
                ha-card.type-calendar {
                  min-height: auto;
                  height: 350px;
                  overflow: hidden;
                }
                ha-card.type-calendar div.header:after {
                  content: "Target SoC is 100% at start of each event.";
                  font-size: 50%;
                  color: #6f6f6f;
                  display: block;
                }
  - title: Help
    icon: mdi:help-box
    cards:
      - type: entities
        entities:
          - entity: sensor.unrecoverable_errors_register_high
          - entity: sensor.unrecoverable_errors_register_low
          - entity: sensor.recoverable_errors_register_high
          - entity: sensor.recoverable_errors_register_low
          - entity: sensor.serial_number_high
          - entity: sensor.serial_number_low
          - entity: sensor.firmware_version
        title: "Quasar"
      - type: entities
        entities:
          - input_number.car_remaining_range
          - input_number.car_state_of_charge
          - input_select.charge_mode
          - update.appdaemon_update
      - type: button
        show_name: true
        show_icon: true
        icon: mdi:reload-alert
        name: Restart charger
        trigger:
          - platform: state
            entity_id: button.restart_charger_button
        tap_action:
          action: call-service
          confirmation:
            text: Are you sure you want to restart?
          service: script.turn_on
          data:
            entity_id: script.RestartCharger
